#!/usr/bin/env bash

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
BASE_DIR="$( cd $SCRIPT_DIR && cd .. & pwd)"

CYAN="\033[96m"
YELLOW="\033[93m"
RESET="\033[0m"
BOLD="\033[1m"
NORMAL="\033[22m"
CHECK="\xE2\x9C\x94"

SINGLE_VERSION="false" # Should we publish all plugins using the version from-the top-level package file?
PUSH=""
REGISTRY=""
REGISTRY_ORG=""
IMAGE_PREFIX="ui-extension-"
FORCE="false"
GITHUB_BUILD="false"
UPDATE_OLD_PACKAGES="true"
UPDATE_LATEST_PACAKGES="true"
FORCE_ALL_EXISTING="false"

GITHUB_SOURCE=$(git config --get remote.origin.url | sed -e 's/^git@.*:\([[:graph:]]*\).git/\1/')
GITHUB_BRANCH="main"

usage() {
  echo "Usage: $0 [-v] [plugins]"
  #echo "  -v        Publish plugins using the version from-the top-level package file"
  echo "  -p           Push container images on build"
  echo "  -f           Force building the chart even if it already exists"
  echo "  -r <name>    Specify destination container registry for built images"
  echo "  -o <name>    Specify destination container registry organization for built images"
  echo "  -i <prefix>  Specify prefix for the built container image (default: 'ui-extension-')"
  echo "  -g           Publish to the GitHub repository rather than using container image"
  echo "  -s <repo>    Specify destination GitHub repository (org/name) - defaults to the git origin (implies -g)"
  echo "  -b <branch>  Specify destination GitHub branch (implies -g)"
  echo "  -n           Do not check for updates to existing Charts (Chart.yaml)"
  echo "  -e           Only check for updates to existing Charts (Chart.yaml)"
  echo "  -E           Re-generate charts for all existing extensions"
  exit 1
}

while getopts "hvr:o:pi:fgb:s:enE" opt; do
  case $opt in
    h)
      usage
      ;;
    v)
      SINGLE_VERSION="true"
      ;;
    p)
      PUSH="--push"
      ;;
    r)
      REGISTRY="${OPTARG%/}/"
      ;;
    o)
      REGISTRY_ORG="${OPTARG}"
      ;;
    i)
      IMAGE_PREFIX="${OPTARG}"
      ;;
    f)
      FORCE="true"
      ;;      
    g)
      GITHUB_BUILD="true"
      ;;
    s)
      GITHUB_BUILD="true"
      GITHUB_SOURCE="${OPTARG}"
      ;;
    b)
      GITHUB_BUILD="true"
      GITHUB_BRANCH="${OPTARG}"
      ;;
    n)
      UPDATE_OLD_PACKAGES="false"
      ;;
    e)
      UPDATE_OLD_PACKAGES="true"
      UPDATE_LATEST_PACAKGES="false"
      ;;
    E)
      FORCE_ALL_EXISTING="true"
      ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

PLUGINS=( "$@" )
BUILT="false"

echo -e "${CYAN}${BOLD}Publishing UI Plugins${RESET}"

pushd ${BASE_DIR} > /dev/null

# VERSION=$(jq -r .version package.json)
# echo "Version: $VERSION"

if [ "${GITHUB_BUILD}" == "true" ]; then
  echo -e "${CYAN}GitHub Repository: ${GITHUB_SOURCE}${RESET}"
  echo -e "${CYAN}GitHub Branch    : ${GITHUB_BRANCH}${RESET}"
else
  echo -e ${CYAN}"Image prefix: ${IMAGE_PREFIX}${RESET}"
fi

# --------------------------------------------------------------------------------
# Check that we have the required commands avaialble for this script
# --------------------------------------------------------------------------------

if ! [[ -d ${BASE_DIR}/node_modules ]]; then
  echo -e "${YELLOW}You must run ${BOLD}yarn install${NORMAL} before running this script${RESET}"
  exit 1
fi

COMMANDS=("node" "jq" "yq" "git" "docker" "helm" "yarn")
HAVE_COMMANDS="true"
for CMD in "${COMMANDS[@]}"
do
  if ! command -v ${CMD} >/dev/null; then
    echo -e "${YELLOW}This script requires ${BOLD}${CMD}${NORMAL} to be installed and on your PATH${RESET}"
    HAVE_COMMANDS="false"
  fi
done

if [ "${HAVE_COMMANDS}" == "false" ]; then
  exit 1
fi

# --------------------------------------------------------------------------------
# Only do container args checks if not GitHub publish
if [ "${GITHUB_BUILD}" == "false" ]; then
  if [[ -z ${REGISTRY_ORG} ]]; then
    # Infer that the user has the same Docker registry org as their GitHub org
    GITHUB_REPO=$(git config --get remote.origin.url | sed -e 's/^git@.*:\([[:graph:]]*\).git/\1/')
    REGISTRY_ORG=$(dirname ${GITHUB_REPO})
    echo -e "Inferring built images will reside in registry organization ${CYAN}${BOLD}${REGISTRY}${REGISTRY_ORG}${RESET} based on configured origin remote pointing to ${CYAN}${BOLD}${GITHUB_REPO}${RESET}"
  fi

  if [[ -z ${REGISTRY_ORG} ]]; then
    # Inferring from the git config still failed
    echo "Cannot build images without valid organization for Docker images. Unable to infer REGISTRY_ORG="
    exit 1
  fi

  docker images > /dev/null
  if [ $? -ne 0 ]; then
    echo "docker is not running - this is required to build container images for the UI Plugins"
    exit 1
  fi
fi

ASSETS=${BASE_DIR}/assets
CHARTS=${BASE_DIR}/charts
mkdir -p ${ASSETS}
mkdir -p ${CHARTS}

TMP=${BASE_DIR}/tmp
CHART_TMP=${BASE_DIR}/tmp/_charts
rm -rf ${TMP}
mkdir -p ${TMP}

CHART_TEMPLATE=${BASE_DIR}/tmp/ui-plugin-server

# --------------------------------------------------------------------------------
# Clone the plugin server template into the temporary folder
# --------------------------------------------------------------------------------
pushd ${TMP} > /dev/null
git clone -q https://github.com/nwmac/ui-plugin-server.git
popd > /dev/null

# --------------------------------------------------------------------------------
# Iterate through all existing charts and look for updates/removals
# --------------------------------------------------------------------------------
if [ "${UPDATE_OLD_PACKAGES}" = "true" ]; then
  pushd ${ASSETS} > /dev/null
  echo -e "${CYAN}${BOLD}Checking existing charts for updates ...${RESET}"

  for FOLDER_NAME in */ ; do
    EXT_NAME=${FOLDER_NAME::${#FOLDER_NAME}-1}
    echo -e "${CYAN}${EXT_NAME}${RESET}"

    for CHART_ARCHIVE in ${EXT_NAME}/*.tgz ; do
      rm -f ${TMP}/Chart.yaml

      # path in chart may be different to tar file name, so extratct the Chart.yaml file to the top-level folder
      tar --strip-components=1 -C ${TMP} -xf ${CHART_ARCHIVE} */Chart.yaml

      EXISTING_MD5=$(md5 -q ${TMP}/Chart.yaml)
      VERSION=$(yq eval .version ${TMP}/Chart.yaml)

      CHART_FOLDER=${CHARTS}/${EXT_NAME}/${VERSION}
      LATEST=${CHART_FOLDER}/Chart.yaml

      if [ ! -f "${LATEST}" ]; then
        echo "  - Chart for ${EXT_NAME}-${VERSION} appears to have been deleted - removing chart archive: ${CHART_ARCHIVE}"
        echo "  -> Please manually remove the chart version from the Helm Repository index file"
        rm -f ${ASSETS}/${CHART_ARCHIVE}
      else
        # Re-package the helm chart so that the Chart.yaml is processed in the same way so we can compare it
        mkdir -p ${TMP}/tmp_chart
        helm package ${CHART_FOLDER} -d ${TMP}/tmp_chart > /dev/null
        rm ${TMP}/Chart.yaml

        # path in chart may be different to tar file name, so list the files to find what the chart archive is named
        FILENAME=$(cd ${TMP}/tmp_chart; ls)

        # path in chart may be different to tar file name, so extratct the Chart.yaml file to the top-level folder
        tar --strip-components=1 -C ${TMP} -xf ${TMP}/tmp_chart/${FILENAME} */Chart.yaml
        LATEST_MD5=$(md5 -q ${TMP}/Chart.yaml)

        rm -f $TMP/tmp_chart/${FILENAME}

        if [ "${EXISTING_MD5}" != "${LATEST_MD5}" ] || [ "${FORCE_ALL_EXISTING}" == "true" ]; then
          echo "  + Chart.yaml has changed for ${CHART_ARCHIVE}"
          # Chart was already re-generated - update ir
          rm ${CHART_ARCHIVE}
          helm package ${CHART_FOLDER} -d ${ASSETS}/${EXT_NAME}

          # --------------------------------------------------------------------------------
          # Update the helm index just for this chart 
          # --------------------------------------------------------------------------------
          HELM_INDEX=${BASE_DIR}/index.yaml

          if [ -f "${HELM_INDEX}" ]; then
            UPDATE="--merge ${HELM_INDEX}"
          fi

          # Base URL referencing assets directly from GitHub
          BASE_URL="assets/${EXT_NAME}"

          rm -rf ${CHART_TMP}
          mkdir -p ${CHART_TMP}
          cp ${CHART_ARCHIVE} ${CHART_TMP}

          helm repo index ${CHART_TMP} --url ${BASE_URL} ${UPDATE}

          cp ${CHART_TMP}/index.yaml ${HELM_INDEX}
          rm -rf ${CHART_TMP}
        fi
      fi

      rm -fd ${TMP}/tmp_chart
      rm -f ${TMP}/Chart.yaml
      
    done
  done

  popd > /dev/null
fi

# --------------------------------------------------------------------------------
# Iterate through all packages - built them all or build only those specified on the command line
# --------------------------------------------------------------------------------
if [ "${UPDATE_LATEST_PACAKGES}" = "true" ]; then
  for d in pkg/*/ ; do
    pkg=$(basename $d)

    if [ -z "$1" ] || [[ " ${PLUGINS[*]} " =~ " ${pkg} " ]]; then
      # Check we don't already have a published version by looking in the assets folder
      PKG_VERSION=$(jq -r .version ./pkg/${pkg}/package.json)
      PKG_NAME="${pkg}-${PKG_VERSION}"
      PKG_ASSET=${ASSETS}/${pkg}/${PKG_NAME}.tgz

      echo -e "${CYAN}${BOLD}Building plugin: ${pkg} (${PKG_VERSION}) ${RESET}"

      echo "Package version: ${PKG_VERSION}"
      echo "Package folder:  ${PKG_NAME}"

      # --------------------------------------------------------------------------------
      # Build the plugin from source
      # --------------------------------------------------------------------------------
      echo -e "${CYAN}Building plugin from source code${RESET}"
      FORCE_COLOR=1 yarn build-pkg $pkg | cat

      # --------------------------------------------------------------------------------
      # Create the container image
      # --------------------------------------------------------------------------------
      mkdir -p ${TMP}/container
      cp -R ${CHART_TEMPLATE}/* ${TMP}/container/    

      # Copy the plugin assets
      rm -rf ${TMP}/container/plugin
      mkdir ${TMP}/container/plugin

      cp -R ${BASE_DIR}/dist-pkg/${PKG_NAME}/* ${TMP}/container/plugin
      rm -f ${TMP}/container/plugin/report.html

      if [ "${GITHUB_BUILD}" == "false" ]; then
        # Build the docker image
        pushd ${TMP}/container > /dev/null
        echo -e "${CYAN}Building container image ...${RESET}"

        REGISTRY=${REGISTRY} ORG=${REGISTRY_ORG} REPO=${IMAGE_PREFIX}${pkg} TAG=${PKG_VERSION} ./scripts/package

        if [ "${PUSH}" == "--push" ]; then
          echo -e "${CYAN}Pushing container image ...${RESET}"

          # Ensure that you do not overwrite production images
          if [[ "${REGISTRY_ORG}" == "rancher" ]]; then
            IMAGE=${REGISTRY}${REGISTRY_ORG}/${IMAGE_PREFIX}${pkg}:${PKG_VERSION}
            if docker manifest inspect 2>&1 1>/dev/null; then
              echo -e "${RED}Cannot overwrite production image ${IMAGE} since it already exists${RESET}"
              exit 1
            fi
          fi

          docker push ${REGISTRY}${REGISTRY_ORG}/${IMAGE_PREFIX}${pkg}:${PKG_VERSION}
        fi

        popd > /dev/null
      else
        echo -e "${CYAN}Adding plugin code ...${RESET}"

        EXT_FOLDER=${BASE_DIR}/extensions/${pkg}/${PKG_VERSION}
        PKG_DIST="${BASE_DIR}/dist-pkg/${PKG_NAME}"

        rm -rf ${EXT_FOLDER}

        mkdir -p ${EXT_FOLDER}/plugin

        # Copy the code into the folder
        cp -R ${PKG_DIST}/* ${EXT_FOLDER}/plugin

        pushd ${BASE_DIR}/extensions/${pkg}/${PKG_VERSION} > /dev/null
        rm -f plugin/report.html
        find plugin -type f | sort > files.txt
        popd > /dev/null
      fi

      rm -rf ${TMP}/container

      # --------------------------------------------------------------------------------
      # Create the Helm chart
      # --------------------------------------------------------------------------------

      if [ -f ${PKG_ASSET} ] && [ "${FORCE}" == "false" ]; then
        echo -e "${YELLOW}Helm chart has already been created - skipping (run with -f to force build)${RESET}"
        continue;
      fi

      CHART_FOLDER=${CHARTS}/${pkg}/${PKG_VERSION}

      mkdir -p ${ASSETS}/${pkg}
      rm -rf ${CHART_FOLDER}
      mkdir -p ${CHART_FOLDER}

      cp -R ${CHART_TEMPLATE}/charts/ui-plugin-server/* ${CHART_FOLDER}

      # Update Chart.yaml and values.yaml from the package file metadata
      # Use the script from the template repository
      echo -e "${CYAN}Patching Helm chart template${RESET}"

      CHART=${CHART_FOLDER} REGISTRY="${REGISTRY}" ORG="${REGISTRY_ORG}" PACKAGE_JSON=${BASE_DIR}/pkg/${pkg}/package.json ${CHART_TEMPLATE}/scripts/patch

      # Copy README file from the plugin to the Helm chart, if there is one
      if [ -f "./pkg/${pkg}/README.md" ]; then
        cp ./pkg/${pkg}/README.md ${CHART_FOLDER}/README.md
      fi

      if [ "${GITHUB_BUILD}" == "true" ]; then
        echo "Patching for GitHub build"
        pushd ${CHART_FOLDER} > /dev/null
        cd templates
        mv cr.yaml temp.cr
        rm *.yaml
        mv temp.cr cr.yaml
        ENDPOINT=https://raw.githubusercontent.com/${GITHUB_SOURCE}/${GITHUB_BRANCH}/extensions/${pkg}/${PKG_VERSION}
        sed -i.bak -e 's@endpoint: .*@endpoint: '"${ENDPOINT}"'@g' cr.yaml       
        rm *.bak
        popd > /dev/null
      fi

      # Additional patches
      ${SCRIPT_DIR}/helmpatch ${CHART_FOLDER} "${BASE_DIR}/pkg/${pkg}/package.json" "${REGISTRY}${REGISTRY_ORG}/${IMAGE_PREFIX}${pkg}"

      # Package into a .tgz helm chart
      helm package ${CHART_FOLDER} -d ${ASSETS}/${pkg}

      # --------------------------------------------------------------------------------
      # Update the helm index just for this chart 
      # --------------------------------------------------------------------------------
      HELM_INDEX=${BASE_DIR}/index.yaml

      if [ -f "${HELM_INDEX}" ]; then
        UPDATE="--merge ${HELM_INDEX}"
      fi

      # Base URL referencing assets directly from GitHub
      BASE_URL="assets/${pkg}"

      rm -rf ${CHART_TMP}
      mkdir -p ${CHART_TMP}
      cp ${ASSETS}/${pkg}/*.tgz ${CHART_TMP}

      helm repo index ${CHART_TMP} --url ${BASE_URL} ${UPDATE}

      cp ${CHART_TMP}/index.yaml ${HELM_INDEX}

      BUILT="true"
    fi
  done
fi

if [ "${BUILT}" == "true" ]; then
  echo -e "${CYAN}${BOLD}${CHECK} One or more packages built${RESET}"
fi

popd > /dev/null

# Clean up
rm -rf ${CHART_TMP}
rm -rf ${TMP}

# If the user asked to create a commit, commit the changes
# if [ "${COMMIT}" == "true" ]; then
#   echo -e "${CYAN}${BOLD}Creating git commit${RESET}"
#   git add --all
# fi
